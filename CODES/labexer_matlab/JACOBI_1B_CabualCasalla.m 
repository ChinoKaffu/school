% MAIN %
    clc
    clear
    format long

    % start of user input %
    A = [
        4 -1 -1 0 0 0 0 0;
        -1 4 -1 -1 0 0 0 0;
        0 -1 4 -1 -1 0 0 0;
        0 0 -1 4 -1 -1 0 0;
        0 0 0 -1 4 -1 -1 0;
        0 0 0 0 -1 4 -1 -1;
        0 0 0 0 0 -1 4 -1;
        0 0 0 0 0 0 -1 4;
    ];

    b = [18;18;4;4;26;16;10;32];

    % JACOBI METHOD %
    fprintf("Now executing JACOBI METHOD\n"); 
    fprintf("1.. ");    pause(1);    
    fprintf("2.. ");    pause(1);    
    fprintf("3.. ");    pause(1);

    [M,x] = jacobi(A,b);

    disp(array2table(M,"VariableNames",["Iteration","x1","x2","x3","x4","x5","x6","x7","x8"]));
    disp(array2table(x,"VariableNames","Solution vector/array x","RowNames",["x1","x2","x3","x4","x5","x6","x7","x8"]));
    
% FUNCTIONS %
    function [M,x] = jacobi(A,b)
        M = [];
        size = (length(A));

        xk = zeros(size, 1); %initial guess

        temp = diag(A);
        D = zeros(size);
        for i = 1:size
            D(i,i) = temp(i,:);
        end

        Lb = tril(A,-1);
        Ub = triu(A,1);
        Tj = -inv(D)*(Lb+Ub);
        Cj = inv(D)*b; %#ok<MINV> 

        iter = 0;

        M(iter+1,:) = [iter, xk'];

        % const finish %

        for i = 1:100 %max iterations
            iter = iter + 1;
            xk1 = (Tj*xk)+Cj;
            if(norm(xk-xk1)<10^-6), break; end
            M(iter+1,:) = [iter, xk1'];
            xk = xk1;
        end

        x = xk1;
    end